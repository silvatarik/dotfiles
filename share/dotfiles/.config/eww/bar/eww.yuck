;;;;; Variables ;;;;;

(defvar volume false)
(defvar brightness false)
(defvar battery false)
(defvar memory false)
(defvar launcher false)
(defvar wifi false)
(defvar music-control false)
(defvar calendar false)
(defvar eww "$HOME/eww/target/release/eww -c ~/.config/eww/")

;;;;;;;;;;;;;;;;;;;;;

;;;;; Deflistens ;;;;;

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ title }}' || true")
(deflisten current-music-cover :initial "" "playerctl --follow metadata --format {{mpris:artUrl}}")

;;;;;;;;;;;;;;;;;;;;;;

;;;;; Defpolls ;;;;;

(defpoll clock :interval "10s" "date '+%H:%M'")
(defpoll current-volume     :interval "1s" 
                            :initial "0"
                            "pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | sed 's/%//'")
(defpoll current-brightness :interval "1s" 
                            :initial "0"
                            "light -G")
(defpoll current-battery    :interval "15s" 
                            :initial "0"
                            "~/.config/eww/bar/scripts/get-battery.sh")
(defpoll current-memory     :interval "10s"    
                            :initial "0"
                            "~/.config/eww/bar/scripts/get-memory.sh")
(defpoll current-music-seek :interval "1s" "~/.config/eww/bar/scripts/get-music-seek.sh")
(defpoll current-wifi :interval "5s" "~/.config/eww/bar/scripts/get-network.sh")
(defpoll wifi-strength :interval "5s" "~/.config/eww/bar/scripts/get-network-strength.sh")
(defpoll volume-icon :interval "1s" "~/.config/eww/bar/scripts/get-volume-icons.sh")
(defpoll calendar-day :interval "10h"
    "date '+%d'")
(defpoll calendar-month :interval "10h"
    "~/.config/eww/bar/scripts/get-month.sh")
(defpoll calendar-year :interval "10h"
    "date '+%Y'")
(defpoll calendar-short :interval "10h" "date '+%b %d, %Y'")

;;;;;;;;;;;;;;;;;;;;



;;;;; Widgets ;;;;;

;; Music ;;
(defwidget music []
  (eventbox :onhover "${eww} update music-control=true"
            :onhoverlost "${eww} update music-control=false"
            :cursor "pointer"
    (revealer :transition "slideup"
              :reveal {current-music-seek != "" ? "true" : "false"}
              :duration "500ms"
    (box  :class "music"
          :orientation "horizontal"
          :space-evenly "false"
          :halign "center"
          (box :class "song-cover-art" :vexpand "false" :hexpand "false" :style "background-image: url('${current-music-cover}');")
      (box :class "parentbox"
            :orientation "vertical"
        (label  :text {music != "" ? "${music}" : ""}
                :truncate "true"
                :limit-width "25")
        (scale :class "musicbar"
               :value {current-music-seek != '' ? "${current-music-seek}" : "0"}
               :orientation "horizontal"
               :max 101
               :min 0
               :onchange "~/.config/eww/bar/scripts/set-music-seek.sh {}"))
        (revealer :transition "slideleft"
                  :reveal music-control
                  :duration "300ms"
          (box  :class "music-control"
                :space-evenly "true"
                :spacing "16"
            (button :class "prev"
                    :onclick "playerctl previous" "")
            (button :class "pause"
                    :onclick "playerctl play-pause" "")
            (button :class "next"
                    :onclick "playerctl next" "")))
      )
    )
)
  )


;; button test ;;


;; Launcher ;;
(defwidget launcher []
  (eventbox :onhover "${eww} update launcher=true"
            :onhoverlost "${eww} update launcher=false"
            :cursor "pointer"
    (box  :orientation "horizontal"
          :space-evenly "false"
      (button :class "launcher"
              :onclick "~/.config/eww/bar/scripts/app-launcher.sh" "󰣇")
      (revealer :transition "slideleft"
                :reveal launcher
                :duration "300ms"
        (box  :class "powermenu"
              :orientation "horizontal"
              :space-evenly "true"
              :spacing 24
          (button :class "shutdown"
                  :tooltip "Power Off"
                  :onclick "shutdown now" "")
          (button :class "lock"
                  :tooltip "Lock"
                  :onclick "~/.config/eww/bar/scripts/lock.sh" "")
          (button :class "reboot"
                  :tooltip "Reboot"
                  :onclick "reboot" "")
          (button :class "exit"
                  :tooltip "Exit"
                  :onclick "killall Hyprland" "")
          (button :class "suspend"
                  :tooltip "Suspend"
                  :onclick "systemctl suspend" "")
        )
      )
    )
  )
  )

;; Clock ;;
(defwidget clock []
  (eventbox :onhover "${eww} update calendar=true"
            :onhoverlost "${eww} update calendar=false"
            :cursor "pointer"
  (box  :class "clock"
        :orientation "horizontal"
        :space-evenly false
        clock
            (revealer :transition "slideleft"
                      :reveal calendar
        (button :class "calendar"
                :onclick "~/.config/eww/bar/scripts/calendar-popup.sh"
                calendar-short)))))

;; Workspaces ;;
(defwidget workspaces []
  (eventbox :onscroll "sh ~/.config/eww/bar/scripts/change-active-workspace.sh {} ${current_workspace}"
    (box :orientation "h"
         :space-evenly false
         :class "workspaces"
         :hexpand true
      (for workspace in workspaces
        (button :class "workspace ${current_workspace == workspace.id ? "current" : ""}"
                :onclick "hyprctl dispatch workspace ${workspace.id}"
                "${current_workspace == workspace.id ? "" : ""}")
      )
    )
  )
)

;; Wifi ;;
(defwidget wifi []
  (eventbox :onhover "${eww} update wifi=true"
            :onhoverlost "${eww} update wifi=false"
            :cursor "pointer"
            :tooltip "Connected to ${current-wifi}"
  (box  :class "wifi"
        :orientation "horizontal"
        :space-evenly "false"
    (button :class "wifi-icon"
            :onclick "~/.config/eww/bar/scripts/wifi-menu.sh" wifi-strength)
    (revealer :transition "slideright"
              :reveal wifi
              :duration "300ms"
              (button :onclick "~/.config/eww/bar/scripts/wifi-menu.sh"
              (label  :class "wifi-label"
                      :text current-wifi)))))
              )


;; Volume ;;
(defwidget volume []
  (eventbox :onhover "${eww} update volume=true"
            :onhoverlost "${eww} update volume=false"
            :cursor "pointer"
    (box  :class "volume"
          :tooltip "Volume: ${current-volume}%"
          :orientation "horizontal"
          :space-evenly "false"
          :spacing "2"
      (button :class "volume-icon" volume-icon)
      (revealer :transition "slideleft"
                :reveal volume
                :duration "300ms"
        (scale :class "volbar"
               :value current-volume
               :orientation "horizontal"
               :max 101
               :min 0
               :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
      )
    )
  )
)

;; Brightness ;;
(defwidget brightness []
  (eventbox :onhover "${eww} update brightness=true"
            :onhoverlost "${eww} update brightness=false"
            :cursor "pointer"
    (box  :class "brightness"
          :tooltip "Brightness: ${current-brightness}%"
          :orientation "horizontal"
          :space-evenly "false"
          :spacing "2"
      (button :class "brightness-icon" "󰖨")
      (revealer :transition "slideleft"
                :reveal brightness
                :duration "300ms"
        (scale :class "brightnessbar"
               :value current-brightness
               :orientation "horizontal"
               :max 101
               :min 0
               :onchange "light -S {}%")
      )
    )
  )
)


;; Battery ;;
(defwidget battery []
(eventbox :onhover "${eww} update battery=true"
          :onhoverlost "${eww} update battery=false"
  (box  :class "battery"
        :orientation "horizontal"
        :space-evenly "false"
    (circular-progress :value current-battery
                       :class "batterybar"
                       :thickness 4
      (button :class "battery-icon"
              :tooltip "battery: ${current-battery}%"
              ""))
      (revealer :transition "slideleft"
                :reveal battery
                :duration "300ms"
        (label  :class "battery-label"
                :tooltip "battery: ${current-battery}%"
                :text "${current-battery}%")))
  )
)


;; Memory ;;
(defwidget memory []
(eventbox :onhover "${eww} update memory=true"
          :onhoverlost "${eww} update memory=false"
  (box  :class "memory"
        :orientation "horizontal"
        :space-evenly "false"
    (circular-progress :value current-memory
                       :class "memorybar"
                       :thickness 4
      (button :class "memory-icon"
              :tooltip "memory used: ${current-memory}%"
              ""))
      (revealer :transition "slideleft"
                :reveal memory
                :duration "300ms"
        (label  :class "memory-label"
                :tooltip "memory used: ${current-memory}%"
                :text "${current-memory}%")))
  )
)

;; Calendar Widget ""
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "v"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar-day 
			  :month calendar-month 
			  :year calendar-year))))

;;;;;;;;;;;;;;;;;;;;



;;;;;; Groups ;;;;;;

;; Left Group ;;
(defwidget left []
  (box  :class "left"
        :orientation "horizontal"
        :space-evenly "false"
        :halign "start"
        :vexpand "false"
        :hexpand "false"
    (launcher)
    (workspaces))
)

;; Right Group ;;
(defwidget right []
  (box  :class "right"
        :orientation "horizontal"
        :space-evenly "false"
        :halign "end"
        :vexpand "false"
        :hexpand "false"
    (memory)
    (battery)
    (brightness)
    (volume)
    (wifi)
    (clock))
)

;; Center Group ;;
(defwidget center []
  (box  :class "center"
        :orientation "horizontal"
        :space-evenly "false"
        :halign "center"
        :vexpand "false"
        :hexpand "false"
    (music))
)

;; Bar ;;
(defwidget bar []
  (box  :class "main-bar"
        :orientation "horizontal"
        :vexpand "false"
        :hexpand "false"
    (left)
    (center)
    (right))
)

;;;;;;;;;;;;;;;;;;;;



;;;;;; Window ;;;;;;

;; bar ;;
(defwindow bar
          :monitor 0
          :windowtype "dock"
          :geometry (geometry :x "10px"
                              :y "10px"
                              :width "99%"
                              :height "20px"
                              :anchor "top center")
          :stacking "fg"
          :exclusive "true"
          :focusable "false"
          (bar))

(defwindow calendar
          :monitor 0
          :geometry (geometry :x "10px"
                              :y "5px"
                              :width "270px"
                              :height "60px"
                              :anchor "top right")
          (cal))

